// PPrimaryEventAction is the service that injects particles into
// the simulation.
// To use this action, all you need to do is put it in the services section
// of the configuration file, like this:
// 
// services: { 
//   ...
//   user: {
//     PPrimaryEventAction: {}
//     ...
//   }
// }

// Expected parameters:
// - name (string): A name describing the action service.
//       Default is 'exampleParticleGun'

// - use_HEP_event (bool): A flag; if true, the primaries will be taken from
//       an input file called 'pythia_event.data'. If false, primaries will
//       be generated by a particle gun. 
//       Default is true.

// Authors: Tasha Arvanitis, Adam Lyon
// Date: August 2012

// Include guard
#ifndef EXAMPLE_PRIMARYGENERATORACTION_SERVICE_HH
#define EXAMPLE_PRIMARYGENERATORACTION_SERVICE_HH

// Includes
#include "fhiclcpp/ParameterSet.h"
#include "art/Framework/Services/Registry/ActivityRegistry.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include "art/Framework/Services/Registry/ServiceMacros.h"
#include "art/Framework/Core/EDProducer.h"

#include "Geant4/G4Event.hh"
#include "Geant4/G4ParticleGun.hh"
#include "Geant4/G4VPrimaryGenerator.hh"

// Get the base class
#include "artg4tk/actionBase/PrimaryGeneratorActionBase.hh"

namespace artg4tk {

  class PrimaryEventActionService 
    : public artg4tk::PrimaryGeneratorActionBase {
  public: 
    PrimaryEventActionService(fhicl::ParameterSet const&, 
				    art::ActivityRegistry&);
    virtual ~PrimaryEventActionService();
    
    void addG4Particle(G4Event *event,
                       int pdgId,
                       const G4ThreeVector& pos,
                       double time,
                       double energy,
                       const G4ThreeVector& mom);

    // To generate primaries, we need to overload the GeneratePrimaries
    // method. 
    
    virtual void generatePrimaries(G4Event * anEvent) override;

    // We don't add anything to the event, so we don't need callArtProduces
    // or FillEventWithArtStuff.

  private:

    // A message logger for this action object
    mf::LogInfo logInfo_;

  };
}//namespace artg4tk
using artg4tk::PrimaryEventActionService;
DECLARE_ART_SERVICE(PrimaryEventActionService,LEGACY)


#endif
